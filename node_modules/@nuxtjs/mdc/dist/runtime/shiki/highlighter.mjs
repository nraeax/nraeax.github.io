import { getHighlighter } from "shikiji";
export const useShikiHighlighter = createSingleton((opts) => {
  const { theme, preload, wrapperStyle } = opts || {};
  let promise;
  const getShikiHighlighter = () => {
    if (!promise) {
      promise = getHighlighter({
        themes: [
          theme?.default || theme || "dark-plus"
        ],
        langs: [
          ...preload || [],
          "diff",
          "json",
          "js",
          "ts",
          "css",
          "shell",
          "html",
          "md",
          "yaml",
          "vue",
          "mdc"
        ]
      }).then((highlighter) => {
        const themes = Object.values(typeof theme === "string" ? { default: theme } : theme || {});
        if (themes.length) {
          return Promise.all(themes.map((theme2) => highlighter.loadTheme(theme2))).then(() => highlighter);
        }
        return highlighter;
      });
    }
    return promise;
  };
  const getHighlightedAST = async (code, lang, theme2, opts2) => {
    const highlighter = await getShikiHighlighter();
    const { highlights = [] } = opts2 || {};
    const themesObject = typeof theme2 === "string" ? { default: theme2 } : theme2 || {};
    const themeNames = Object.values(themesObject);
    if (themeNames.length) {
      await Promise.all(themeNames.map((theme3) => highlighter.loadTheme(theme3)));
    }
    if (lang && !highlighter.getLoadedLanguages().includes(lang)) {
      await highlighter.loadLanguage(lang);
    }
    const root = highlighter.codeToHast(code.trimEnd(), {
      lang,
      themes: themesObject,
      defaultColor: "default",
      transforms: {
        line(node, line) {
          node.properties ||= {};
          if (highlights.includes(line)) {
            node.properties.class = (node.properties.class || "") + " highlight";
          }
          node.properties.line = line;
        }
      }
    });
    const preEl = root.children[0];
    const codeEl = preEl.children[0];
    preEl.properties.style = wrapperStyle ? typeof wrapperStyle === "string" ? wrapperStyle : preEl.properties.style : "";
    const style = Object.keys(themesObject).filter((color) => color !== "default").map((color) => [
      wrapperStyle ? `html.${color} .shiki,` : "",
      `html.${color} .shiki span {`,
      `color: var(--shiki-${color}) !important;`,
      `background: var(--shiki-${color}-bg) !important;`,
      `font-style: var(--shiki-${color}-font-style) !important;`,
      `font-weight: var(--shiki-${color}-font-weight) !important;`,
      `text-decoration: var(--shiki-${color}-text-decoration) !important;`,
      "}"
    ].join("").trim()).join("\n");
    return {
      tree: codeEl.children,
      className: preEl.properties.class,
      inlineStyle: preEl.properties.style,
      style
    };
  };
  return {
    getHighlightedAST
  };
});
function createSingleton(fn) {
  let instance;
  return (...args) => {
    if (!instance) {
      instance = fn(...args);
    }
    return instance;
  };
}
